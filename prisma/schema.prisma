generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model author {
  id        Int      @id @default(autoincrement())
  name      String   @unique(map: "Author_name_key")
  createdAt DateTime @default(now())
  book      book[]
}

model book {
  id             Int              @id @default(autoincrement())
  title          String
  year           Int?
  pages          Int
  finishedPages  Int              @default(0)
  genre          String?
  status         book_status      @default(TO_READ)
  rating         book_rating?
  cover          String           @db.Text
  isbn           String           @unique(map: "Book_isbn_key")
  description    String           @db.Text
  notes          String?          @db.Text
  authorId       Int
  userId         String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt // ← MUDANÇA AQUI
  author         author           @relation(fields: [authorId], references: [id])
  user           User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentReading CurrentReading[]
  ReadingTimer   ReadingTimer?

  @@index([authorId], map: "Book_authorId_fkey")
  @@index([userId])
}

enum book_status {
  READ
  READING
  TO_READ
  ABANDONED
  PAUSED
}

enum book_rating {
  ONE_STAR
  TWO_STARS
  THREE_STARS
  FOUR_STARS
  FIVE_STARS
}

model CurrentReading {
  id              Int              @id @default(autoincrement())
  bookId          Int
  book            book             @relation(fields: [bookId], references: [id], onDelete: Cascade)
  currentPage     Int              @default(0)
  isPaused        Boolean          @default(false)
  startedAt       DateTime         @default(now())
  finishedAt      DateTime?
  predictedFinish DateTime?
  progressUpdates ProgressUpdate[]
  notes           ReadingNote[]

  // ===== campos do cronômetro =====
  totalSeconds   Int       @default(0)
  isTimerRunning Boolean   @default(false)
  lastStartedAt  DateTime?

  @@unique([bookId])
}

model ProgressUpdate {
  id Int @id @default(autoincrement())

  readingId Int
  reading   CurrentReading @relation(fields: [readingId], references: [id], onDelete: Cascade)

  pagesRead      Int
  readingTimeMin Int
  date           DateTime @default(now())
}

model ReadingNote {
  id Int @id @default(autoincrement())

  readingId Int
  reading   CurrentReading @relation(fields: [readingId], references: [id], onDelete: Cascade)

  pageReference Int?
  content       String   @db.Text
  createdAt     DateTime @default(now())
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  password         String
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  books book[]
}

model ReadingTimer {
  id           Int       @id @default(autoincrement())
  bookId       Int
  book         book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  startTime    DateTime  @default(now())
  endTime      DateTime?
  totalSeconds Int       @default(0)
  isRunning    Boolean   @default(false)

  @@unique([bookId])
}
